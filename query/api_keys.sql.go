// Code generated by sqlc. DO NOT EDIT.
// source: api_keys.sql

package query

import (
	"context"
)

const deleteAPIKey = `-- name: DeleteAPIKey :execrows
DELETE FROM keys
WHERE secret_hash = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, secretHash string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAPIKey, secretHash)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const insertAPIKey = `-- name: InsertAPIKey :exec
INSERT INTO keys (secret_hash, ns)
VALUES ($1, $2)
`

type InsertAPIKeyParams struct {
	SecretHash string
	Ns         string
}

func (q *Queries) InsertAPIKey(ctx context.Context, arg InsertAPIKeyParams) error {
	_, err := q.db.Exec(ctx, insertAPIKey, arg.SecretHash, arg.Ns)
	return err
}

const listAPIKeysForNS = `-- name: ListAPIKeysForNS :many
SELECT secret_hash, ns, created_at
FROM keys
WHERE ns = $1
`

func (q *Queries) ListAPIKeysForNS(ctx context.Context, ns string) ([]Key, error) {
	rows, err := q.db.Query(ctx, listAPIKeysForNS, ns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(&i.SecretHash, &i.Ns, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAPIKeyNS = `-- name: SelectAPIKeyNS :one
SELECT ns
FROM keys
WHERE secret_hash = $1
`

func (q *Queries) SelectAPIKeyNS(ctx context.Context, secretHash string) (string, error) {
	row := q.db.QueryRow(ctx, selectAPIKeyNS, secretHash)
	var ns string
	err := row.Scan(&ns)
	return ns, err
}
