// Code generated by sqlc. DO NOT EDIT.
// source: api_keys.sql

package query

import (
	"context"
)

const deleteAPIKey = `-- name: DeleteAPIKey :execrows
DELETE FROM keys
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAPIKey, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const insertAPIKey = `-- name: InsertAPIKey :exec
INSERT INTO keys (id, secret_hash, ns, max_recursions)
VALUES ($1, $2, $3, $4)
`

type InsertAPIKeyParams struct {
	ID            string
	SecretHash    string
	Ns            string
	MaxRecursions int64
}

func (q *Queries) InsertAPIKey(ctx context.Context, arg InsertAPIKeyParams) error {
	_, err := q.db.Exec(ctx, insertAPIKey,
		arg.ID,
		arg.SecretHash,
		arg.Ns,
		arg.MaxRecursions,
	)
	return err
}

const listAPIKeysForNS = `-- name: ListAPIKeysForNS :many
SELECT id, secret_hash, ns, created_at, max_recursions
FROM keys
WHERE ns = $1
`

func (q *Queries) ListAPIKeysForNS(ctx context.Context, ns string) ([]Key, error) {
	rows, err := q.db.Query(ctx, listAPIKeysForNS, ns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.ID,
			&i.SecretHash,
			&i.Ns,
			&i.CreatedAt,
			&i.MaxRecursions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAPIKey = `-- name: SelectAPIKey :one
SELECT secret_hash, ns, max_recursions
FROM keys
WHERE id = $1
`

type SelectAPIKeyRow struct {
	SecretHash    string
	Ns            string
	MaxRecursions int64
}

func (q *Queries) SelectAPIKey(ctx context.Context, id string) (SelectAPIKeyRow, error) {
	row := q.db.QueryRow(ctx, selectAPIKey, id)
	var i SelectAPIKeyRow
	err := row.Scan(&i.SecretHash, &i.Ns, &i.MaxRecursions)
	return i, err
}
