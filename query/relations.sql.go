// Code generated by sqlc. DO NOT EDIT.
// source: relations.sql

package query

import (
	"context"
)

const checkRelationDirect = `-- name: CheckRelationDirect :one
SELECT object, entity, permission, ns
FROM relations
WHERE ns = $1
AND entity = $2
AND permission = $3
AND object = $4
`

type CheckRelationDirectParams struct {
	Ns         string
	Entity     string
	Permission string
	Object     string
}

func (q *Queries) CheckRelationDirect(ctx context.Context, arg CheckRelationDirectParams) (Relation, error) {
	row := q.db.QueryRow(ctx, checkRelationDirect,
		arg.Ns,
		arg.Entity,
		arg.Permission,
		arg.Object,
	)
	var i Relation
	err := row.Scan(
		&i.Object,
		&i.Entity,
		&i.Permission,
		&i.Ns,
	)
	return i, err
}

const getGroupRelations = `-- name: GetGroupRelations :many
SELECT object, entity, permission, ns
FROM relations
WHERE ns = $1
AND entity > '~'
AND permission = $2
AND object = $3
`

type GetGroupRelationsParams struct {
	Ns         string
	Permission string
	Object     string
}

func (q *Queries) GetGroupRelations(ctx context.Context, arg GetGroupRelationsParams) ([]Relation, error) {
	rows, err := q.db.Query(ctx, getGroupRelations, arg.Ns, arg.Permission, arg.Object)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Relation
	for rows.Next() {
		var i Relation
		if err := rows.Scan(
			&i.Object,
			&i.Entity,
			&i.Permission,
			&i.Ns,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
