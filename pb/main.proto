syntax = "proto3";

option go_package = "./pb";

import "pb/permissions.proto";

service PermissionPanther {
  // Checks whether a permission exists, and at what recursion level. If there is an explicit `deny` permission then group checking will be aborted.
  rpc CheckDirectPermission (CheckDirectReq) returns (CheckDirectRes);

  // Lists all the permissions an entity has, optionally specify permissions to filter on
  rpc ListEntityRelations (ListEntityRelationsReq) returns (RelationsResponse);

  // List all relations for an object, optoinally specify permissions to filter on
  rpc ListObjectRelations (ListObjectRelationsReq) returns (RelationsResponse);

  // Will set a permission for an entity on an object. If the permission already exists it is a no-op.
  rpc SetPermission (RelationReq) returns (Applied);

  // Will remove a permission for an entity on an object. If the permission does not exist it is a no-op.
  rpc RemovePermission (RelationReq) returns (Applied);

  // Creates a permission group if it does not exist
  rpc CreatePermissionGroup (PermissionGroupReq) returns (Applied);

  // Deletes a permission group if it exists
  rpc DeletePermissionGroup (PermissionGroupReq) returns (Applied);

  // Adds one or more permissions a to group if it exists, and the permissions are not already in the group
  rpc AddPermissionToGroup (ModifyPermissionGroupReq) returns (Applied);

  // Removes one or more permissions to a group if it exists, and the permissions are in the group
  rpc RemovePermissionFromGroup (ModifyPermissionGroupReq) returns (Applied);

  rpc ListEntitiesInGroup (ListPermissionGroupReq) returns (ListPermissionGroupRes);
}

message Applied {
  bool applied = 1;
}
