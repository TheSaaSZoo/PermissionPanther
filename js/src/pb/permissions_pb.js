// source: pb/permissions.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CheckDirectReq', null, global);
goog.exportSymbol('proto.CheckDirectRes', null, global);
goog.exportSymbol('proto.CreatePermissionGroupReq', null, global);
goog.exportSymbol('proto.DeletePermissionGroupReq', null, global);
goog.exportSymbol('proto.ListEntityRelationsReq', null, global);
goog.exportSymbol('proto.ListObjectRelationsReq', null, global);
goog.exportSymbol('proto.ListPermissionGroupReq', null, global);
goog.exportSymbol('proto.ListPermissionGroupRes', null, global);
goog.exportSymbol('proto.ModifyPermissionGroupReq', null, global);
goog.exportSymbol('proto.PermissionGroupMembership', null, global);
goog.exportSymbol('proto.Relation', null, global);
goog.exportSymbol('proto.RelationReq', null, global);
goog.exportSymbol('proto.RelationsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CheckDirectReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CheckDirectReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CheckDirectReq.displayName = 'proto.CheckDirectReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CheckDirectRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CheckDirectRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CheckDirectRes.displayName = 'proto.CheckDirectRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListEntityRelationsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListEntityRelationsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListEntityRelationsReq.displayName = 'proto.ListEntityRelationsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListObjectRelationsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListObjectRelationsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListObjectRelationsReq.displayName = 'proto.ListObjectRelationsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RelationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RelationsResponse.repeatedFields_, null);
};
goog.inherits(proto.RelationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RelationsResponse.displayName = 'proto.RelationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Relation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Relation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Relation.displayName = 'proto.Relation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RelationReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RelationReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RelationReq.displayName = 'proto.RelationReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreatePermissionGroupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreatePermissionGroupReq.repeatedFields_, null);
};
goog.inherits(proto.CreatePermissionGroupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreatePermissionGroupReq.displayName = 'proto.CreatePermissionGroupReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeletePermissionGroupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeletePermissionGroupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeletePermissionGroupReq.displayName = 'proto.DeletePermissionGroupReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ModifyPermissionGroupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ModifyPermissionGroupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ModifyPermissionGroupReq.displayName = 'proto.ModifyPermissionGroupReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListPermissionGroupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListPermissionGroupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListPermissionGroupReq.displayName = 'proto.ListPermissionGroupReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListPermissionGroupRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListPermissionGroupRes.repeatedFields_, null);
};
goog.inherits(proto.ListPermissionGroupRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListPermissionGroupRes.displayName = 'proto.ListPermissionGroupRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PermissionGroupMembership = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PermissionGroupMembership, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PermissionGroupMembership.displayName = 'proto.PermissionGroupMembership';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CheckDirectReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CheckDirectReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CheckDirectReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CheckDirectReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 4, ""),
    object: jspb.Message.getFieldWithDefault(msg, 5, ""),
    recursive: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    denypermission: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CheckDirectReq}
 */
proto.CheckDirectReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CheckDirectReq;
  return proto.CheckDirectReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CheckDirectReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CheckDirectReq}
 */
proto.CheckDirectReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermission(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setObject(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecursive(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenypermission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CheckDirectReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CheckDirectReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CheckDirectReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CheckDirectReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPermission();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getObject();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRecursive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDenypermission();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keySecret = 2;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getKeysecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setKeysecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string entity = 3;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string permission = 4;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setPermission = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string object = 5;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setObject = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool recursive = 6;
 * @return {boolean}
 */
proto.CheckDirectReq.prototype.getRecursive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setRecursive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string denyPermission = 7;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getDenypermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setDenypermission = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CheckDirectRes.prototype.toObject = function(opt_includeInstance) {
  return proto.CheckDirectRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CheckDirectRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CheckDirectRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    valid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    recursion: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CheckDirectRes}
 */
proto.CheckDirectRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CheckDirectRes;
  return proto.CheckDirectRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CheckDirectRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CheckDirectRes}
 */
proto.CheckDirectRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecursion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CheckDirectRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CheckDirectRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CheckDirectRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CheckDirectRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRecursion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bool valid = 1;
 * @return {boolean}
 */
proto.CheckDirectRes.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CheckDirectRes} returns this
 */
proto.CheckDirectRes.prototype.setValid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 recursion = 2;
 * @return {number}
 */
proto.CheckDirectRes.prototype.getRecursion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CheckDirectRes} returns this
 */
proto.CheckDirectRes.prototype.setRecursion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListEntityRelationsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ListEntityRelationsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListEntityRelationsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListEntityRelationsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 4, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListEntityRelationsReq}
 */
proto.ListEntityRelationsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListEntityRelationsReq;
  return proto.ListEntityRelationsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListEntityRelationsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListEntityRelationsReq}
 */
proto.ListEntityRelationsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermission(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListEntityRelationsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListEntityRelationsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListEntityRelationsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListEntityRelationsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPermission();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.ListEntityRelationsReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListEntityRelationsReq} returns this
 */
proto.ListEntityRelationsReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keySecret = 2;
 * @return {string}
 */
proto.ListEntityRelationsReq.prototype.getKeysecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListEntityRelationsReq} returns this
 */
proto.ListEntityRelationsReq.prototype.setKeysecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string entity = 3;
 * @return {string}
 */
proto.ListEntityRelationsReq.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListEntityRelationsReq} returns this
 */
proto.ListEntityRelationsReq.prototype.setEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string permission = 4;
 * @return {string}
 */
proto.ListEntityRelationsReq.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListEntityRelationsReq} returns this
 */
proto.ListEntityRelationsReq.prototype.setPermission = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 offset = 5;
 * @return {number}
 */
proto.ListEntityRelationsReq.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ListEntityRelationsReq} returns this
 */
proto.ListEntityRelationsReq.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListObjectRelationsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ListObjectRelationsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListObjectRelationsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListObjectRelationsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    object: jspb.Message.getFieldWithDefault(msg, 3, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 4, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListObjectRelationsReq}
 */
proto.ListObjectRelationsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListObjectRelationsReq;
  return proto.ListObjectRelationsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListObjectRelationsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListObjectRelationsReq}
 */
proto.ListObjectRelationsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setObject(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermission(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListObjectRelationsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListObjectRelationsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListObjectRelationsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListObjectRelationsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getObject();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPermission();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.ListObjectRelationsReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListObjectRelationsReq} returns this
 */
proto.ListObjectRelationsReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keySecret = 2;
 * @return {string}
 */
proto.ListObjectRelationsReq.prototype.getKeysecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListObjectRelationsReq} returns this
 */
proto.ListObjectRelationsReq.prototype.setKeysecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string object = 3;
 * @return {string}
 */
proto.ListObjectRelationsReq.prototype.getObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListObjectRelationsReq} returns this
 */
proto.ListObjectRelationsReq.prototype.setObject = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string permission = 4;
 * @return {string}
 */
proto.ListObjectRelationsReq.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListObjectRelationsReq} returns this
 */
proto.ListObjectRelationsReq.prototype.setPermission = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 offset = 5;
 * @return {number}
 */
proto.ListObjectRelationsReq.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ListObjectRelationsReq} returns this
 */
proto.ListObjectRelationsReq.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RelationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RelationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RelationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RelationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationsList: jspb.Message.toObjectList(msg.getRelationsList(),
    proto.Relation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RelationsResponse}
 */
proto.RelationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RelationsResponse;
  return proto.RelationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RelationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RelationsResponse}
 */
proto.RelationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Relation;
      reader.readMessage(value,proto.Relation.deserializeBinaryFromReader);
      msg.addRelations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RelationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RelationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RelationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Relation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Relation relations = 1;
 * @return {!Array<!proto.Relation>}
 */
proto.RelationsResponse.prototype.getRelationsList = function() {
  return /** @type{!Array<!proto.Relation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Relation, 1));
};


/**
 * @param {!Array<!proto.Relation>} value
 * @return {!proto.RelationsResponse} returns this
*/
proto.RelationsResponse.prototype.setRelationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Relation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Relation}
 */
proto.RelationsResponse.prototype.addRelations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Relation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RelationsResponse} returns this
 */
proto.RelationsResponse.prototype.clearRelationsList = function() {
  return this.setRelationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Relation.prototype.toObject = function(opt_includeInstance) {
  return proto.Relation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Relation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Relation.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 2, ""),
    object: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Relation}
 */
proto.Relation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Relation;
  return proto.Relation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Relation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Relation}
 */
proto.Relation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermission(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Relation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Relation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Relation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Relation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPermission();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getObject();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string entity = 1;
 * @return {string}
 */
proto.Relation.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Relation} returns this
 */
proto.Relation.prototype.setEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string permission = 2;
 * @return {string}
 */
proto.Relation.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Relation} returns this
 */
proto.Relation.prototype.setPermission = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string object = 3;
 * @return {string}
 */
proto.Relation.prototype.getObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Relation} returns this
 */
proto.Relation.prototype.setObject = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RelationReq.prototype.toObject = function(opt_includeInstance) {
  return proto.RelationReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RelationReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 4, ""),
    object: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RelationReq}
 */
proto.RelationReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RelationReq;
  return proto.RelationReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RelationReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RelationReq}
 */
proto.RelationReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermission(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RelationReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RelationReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RelationReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPermission();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getObject();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.RelationReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelationReq} returns this
 */
proto.RelationReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keySecret = 2;
 * @return {string}
 */
proto.RelationReq.prototype.getKeysecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelationReq} returns this
 */
proto.RelationReq.prototype.setKeysecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string entity = 3;
 * @return {string}
 */
proto.RelationReq.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelationReq} returns this
 */
proto.RelationReq.prototype.setEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string permission = 4;
 * @return {string}
 */
proto.RelationReq.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelationReq} returns this
 */
proto.RelationReq.prototype.setPermission = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string object = 5;
 * @return {string}
 */
proto.RelationReq.prototype.getObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.RelationReq} returns this
 */
proto.RelationReq.prototype.setObject = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreatePermissionGroupReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreatePermissionGroupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CreatePermissionGroupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreatePermissionGroupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreatePermissionGroupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    permissionsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreatePermissionGroupReq}
 */
proto.CreatePermissionGroupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreatePermissionGroupReq;
  return proto.CreatePermissionGroupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreatePermissionGroupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreatePermissionGroupReq}
 */
proto.CreatePermissionGroupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreatePermissionGroupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreatePermissionGroupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreatePermissionGroupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreatePermissionGroupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPermissionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.CreatePermissionGroupReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CreatePermissionGroupReq} returns this
 */
proto.CreatePermissionGroupReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keySecret = 2;
 * @return {string}
 */
proto.CreatePermissionGroupReq.prototype.getKeysecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CreatePermissionGroupReq} returns this
 */
proto.CreatePermissionGroupReq.prototype.setKeysecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string groupName = 3;
 * @return {string}
 */
proto.CreatePermissionGroupReq.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CreatePermissionGroupReq} returns this
 */
proto.CreatePermissionGroupReq.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string permissions = 4;
 * @return {!Array<string>}
 */
proto.CreatePermissionGroupReq.prototype.getPermissionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.CreatePermissionGroupReq} returns this
 */
proto.CreatePermissionGroupReq.prototype.setPermissionsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.CreatePermissionGroupReq} returns this
 */
proto.CreatePermissionGroupReq.prototype.addPermissions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CreatePermissionGroupReq} returns this
 */
proto.CreatePermissionGroupReq.prototype.clearPermissionsList = function() {
  return this.setPermissionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeletePermissionGroupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.DeletePermissionGroupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeletePermissionGroupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeletePermissionGroupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    propagate: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeletePermissionGroupReq}
 */
proto.DeletePermissionGroupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeletePermissionGroupReq;
  return proto.DeletePermissionGroupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeletePermissionGroupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeletePermissionGroupReq}
 */
proto.DeletePermissionGroupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPropagate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeletePermissionGroupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeletePermissionGroupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeletePermissionGroupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeletePermissionGroupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPropagate();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.DeletePermissionGroupReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeletePermissionGroupReq} returns this
 */
proto.DeletePermissionGroupReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keySecret = 2;
 * @return {string}
 */
proto.DeletePermissionGroupReq.prototype.getKeysecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeletePermissionGroupReq} returns this
 */
proto.DeletePermissionGroupReq.prototype.setKeysecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string groupName = 3;
 * @return {string}
 */
proto.DeletePermissionGroupReq.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeletePermissionGroupReq} returns this
 */
proto.DeletePermissionGroupReq.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool propagate = 4;
 * @return {boolean}
 */
proto.DeletePermissionGroupReq.prototype.getPropagate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.DeletePermissionGroupReq} returns this
 */
proto.DeletePermissionGroupReq.prototype.setPropagate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ModifyPermissionGroupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ModifyPermissionGroupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ModifyPermissionGroupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModifyPermissionGroupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 4, ""),
    propagate: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ModifyPermissionGroupReq}
 */
proto.ModifyPermissionGroupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ModifyPermissionGroupReq;
  return proto.ModifyPermissionGroupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ModifyPermissionGroupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ModifyPermissionGroupReq}
 */
proto.ModifyPermissionGroupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermission(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPropagate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ModifyPermissionGroupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ModifyPermissionGroupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ModifyPermissionGroupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ModifyPermissionGroupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPermission();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPropagate();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.ModifyPermissionGroupReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ModifyPermissionGroupReq} returns this
 */
proto.ModifyPermissionGroupReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keySecret = 2;
 * @return {string}
 */
proto.ModifyPermissionGroupReq.prototype.getKeysecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ModifyPermissionGroupReq} returns this
 */
proto.ModifyPermissionGroupReq.prototype.setKeysecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string groupName = 3;
 * @return {string}
 */
proto.ModifyPermissionGroupReq.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ModifyPermissionGroupReq} returns this
 */
proto.ModifyPermissionGroupReq.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string permission = 4;
 * @return {string}
 */
proto.ModifyPermissionGroupReq.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ModifyPermissionGroupReq} returns this
 */
proto.ModifyPermissionGroupReq.prototype.setPermission = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool propagate = 5;
 * @return {boolean}
 */
proto.ModifyPermissionGroupReq.prototype.getPropagate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ModifyPermissionGroupReq} returns this
 */
proto.ModifyPermissionGroupReq.prototype.setPropagate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListPermissionGroupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ListPermissionGroupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListPermissionGroupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListPermissionGroupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keysecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListPermissionGroupReq}
 */
proto.ListPermissionGroupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListPermissionGroupReq;
  return proto.ListPermissionGroupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListPermissionGroupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListPermissionGroupReq}
 */
proto.ListPermissionGroupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListPermissionGroupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListPermissionGroupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListPermissionGroupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListPermissionGroupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeysecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.ListPermissionGroupReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListPermissionGroupReq} returns this
 */
proto.ListPermissionGroupReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keySecret = 2;
 * @return {string}
 */
proto.ListPermissionGroupReq.prototype.getKeysecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListPermissionGroupReq} returns this
 */
proto.ListPermissionGroupReq.prototype.setKeysecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string groupName = 3;
 * @return {string}
 */
proto.ListPermissionGroupReq.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListPermissionGroupReq} returns this
 */
proto.ListPermissionGroupReq.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string offset = 4;
 * @return {string}
 */
proto.ListPermissionGroupReq.prototype.getOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListPermissionGroupReq} returns this
 */
proto.ListPermissionGroupReq.prototype.setOffset = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListPermissionGroupRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListPermissionGroupRes.prototype.toObject = function(opt_includeInstance) {
  return proto.ListPermissionGroupRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListPermissionGroupRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListPermissionGroupRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.PermissionGroupMembership.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListPermissionGroupRes}
 */
proto.ListPermissionGroupRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListPermissionGroupRes;
  return proto.ListPermissionGroupRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListPermissionGroupRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListPermissionGroupRes}
 */
proto.ListPermissionGroupRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.PermissionGroupMembership;
      reader.readMessage(value,proto.PermissionGroupMembership.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListPermissionGroupRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListPermissionGroupRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListPermissionGroupRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListPermissionGroupRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PermissionGroupMembership.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PermissionGroupMembership members = 2;
 * @return {!Array<!proto.PermissionGroupMembership>}
 */
proto.ListPermissionGroupRes.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.PermissionGroupMembership>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PermissionGroupMembership, 2));
};


/**
 * @param {!Array<!proto.PermissionGroupMembership>} value
 * @return {!proto.ListPermissionGroupRes} returns this
*/
proto.ListPermissionGroupRes.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PermissionGroupMembership=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PermissionGroupMembership}
 */
proto.ListPermissionGroupRes.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PermissionGroupMembership, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ListPermissionGroupRes} returns this
 */
proto.ListPermissionGroupRes.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PermissionGroupMembership.prototype.toObject = function(opt_includeInstance) {
  return proto.PermissionGroupMembership.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PermissionGroupMembership} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PermissionGroupMembership.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    object: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PermissionGroupMembership}
 */
proto.PermissionGroupMembership.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PermissionGroupMembership;
  return proto.PermissionGroupMembership.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PermissionGroupMembership} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PermissionGroupMembership}
 */
proto.PermissionGroupMembership.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PermissionGroupMembership.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PermissionGroupMembership.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PermissionGroupMembership} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PermissionGroupMembership.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getObject();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string groupName = 1;
 * @return {string}
 */
proto.PermissionGroupMembership.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PermissionGroupMembership} returns this
 */
proto.PermissionGroupMembership.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string entity = 2;
 * @return {string}
 */
proto.PermissionGroupMembership.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PermissionGroupMembership} returns this
 */
proto.PermissionGroupMembership.prototype.setEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string object = 4;
 * @return {string}
 */
proto.PermissionGroupMembership.prototype.getObject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PermissionGroupMembership} returns this
 */
proto.PermissionGroupMembership.prototype.setObject = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto);
