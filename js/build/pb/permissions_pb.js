"use strict";
// source: pb/permissions.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.CheckDirectReq', null, global);
goog.exportSymbol('proto.CheckDirectRes', null, global);
goog.exportSymbol('proto.ListEntityRelationsReq', null, global);
goog.exportSymbol('proto.ListObjectRelationsReq', null, global);
goog.exportSymbol('proto.Relation', null, global);
goog.exportSymbol('proto.RelationsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CheckDirectReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CheckDirectReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.CheckDirectReq.displayName = 'proto.CheckDirectReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CheckDirectRes = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CheckDirectRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.CheckDirectRes.displayName = 'proto.CheckDirectRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListEntityRelationsReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListEntityRelationsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ListEntityRelationsReq.displayName = 'proto.ListEntityRelationsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListObjectRelationsReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListObjectRelationsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ListObjectRelationsReq.displayName = 'proto.ListObjectRelationsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RelationsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.RelationsResponse.repeatedFields_, null);
};
goog.inherits(proto.RelationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.RelationsResponse.displayName = 'proto.RelationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Relation = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Relation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.Relation.displayName = 'proto.Relation';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.CheckDirectReq.prototype.toObject = function (opt_includeInstance) {
        return proto.CheckDirectReq.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.CheckDirectReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.CheckDirectReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            entity: jspb.Message.getFieldWithDefault(msg, 2, ""),
            permission: jspb.Message.getFieldWithDefault(msg, 3, ""),
            object: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CheckDirectReq}
 */
proto.CheckDirectReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.CheckDirectReq;
    return proto.CheckDirectReq.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CheckDirectReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CheckDirectReq}
 */
proto.CheckDirectReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setEntity(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPermission(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setObject(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CheckDirectReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.CheckDirectReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CheckDirectReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CheckDirectReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getEntity();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getPermission();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getObject();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string entity = 2;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getEntity = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setEntity = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string permission = 3;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getPermission = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setPermission = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string object = 4;
 * @return {string}
 */
proto.CheckDirectReq.prototype.getObject = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.CheckDirectReq} returns this
 */
proto.CheckDirectReq.prototype.setObject = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.CheckDirectRes.prototype.toObject = function (opt_includeInstance) {
        return proto.CheckDirectRes.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.CheckDirectRes} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.CheckDirectRes.toObject = function (includeInstance, msg) {
        var f, obj = {
            valid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
            recursion: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CheckDirectRes}
 */
proto.CheckDirectRes.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.CheckDirectRes;
    return proto.CheckDirectRes.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CheckDirectRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CheckDirectRes}
 */
proto.CheckDirectRes.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setValid(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRecursion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CheckDirectRes.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.CheckDirectRes.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CheckDirectRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CheckDirectRes.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValid();
    if (f) {
        writer.writeBool(1, f);
    }
    f = message.getRecursion();
    if (f !== 0) {
        writer.writeInt32(2, f);
    }
};
/**
 * optional bool valid = 1;
 * @return {boolean}
 */
proto.CheckDirectRes.prototype.getValid = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.CheckDirectRes} returns this
 */
proto.CheckDirectRes.prototype.setValid = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
/**
 * optional int32 recursion = 2;
 * @return {number}
 */
proto.CheckDirectRes.prototype.getRecursion = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.CheckDirectRes} returns this
 */
proto.CheckDirectRes.prototype.setRecursion = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ListEntityRelationsReq.prototype.toObject = function (opt_includeInstance) {
        return proto.ListEntityRelationsReq.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ListEntityRelationsReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ListEntityRelationsReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            entity: jspb.Message.getFieldWithDefault(msg, 2, ""),
            permission: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListEntityRelationsReq}
 */
proto.ListEntityRelationsReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ListEntityRelationsReq;
    return proto.ListEntityRelationsReq.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListEntityRelationsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListEntityRelationsReq}
 */
proto.ListEntityRelationsReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setEntity(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPermission(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListEntityRelationsReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ListEntityRelationsReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListEntityRelationsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListEntityRelationsReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getEntity();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getPermission();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.ListEntityRelationsReq.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.ListEntityRelationsReq} returns this
 */
proto.ListEntityRelationsReq.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string entity = 2;
 * @return {string}
 */
proto.ListEntityRelationsReq.prototype.getEntity = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.ListEntityRelationsReq} returns this
 */
proto.ListEntityRelationsReq.prototype.setEntity = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string permission = 3;
 * @return {string}
 */
proto.ListEntityRelationsReq.prototype.getPermission = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.ListEntityRelationsReq} returns this
 */
proto.ListEntityRelationsReq.prototype.setPermission = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ListObjectRelationsReq.prototype.toObject = function (opt_includeInstance) {
        return proto.ListObjectRelationsReq.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ListObjectRelationsReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ListObjectRelationsReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            object: jspb.Message.getFieldWithDefault(msg, 2, ""),
            permission: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListObjectRelationsReq}
 */
proto.ListObjectRelationsReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ListObjectRelationsReq;
    return proto.ListObjectRelationsReq.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListObjectRelationsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListObjectRelationsReq}
 */
proto.ListObjectRelationsReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setObject(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPermission(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListObjectRelationsReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ListObjectRelationsReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListObjectRelationsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListObjectRelationsReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getObject();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getPermission();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.ListObjectRelationsReq.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.ListObjectRelationsReq} returns this
 */
proto.ListObjectRelationsReq.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string object = 2;
 * @return {string}
 */
proto.ListObjectRelationsReq.prototype.getObject = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.ListObjectRelationsReq} returns this
 */
proto.ListObjectRelationsReq.prototype.setObject = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string permission = 3;
 * @return {string}
 */
proto.ListObjectRelationsReq.prototype.getPermission = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.ListObjectRelationsReq} returns this
 */
proto.ListObjectRelationsReq.prototype.setPermission = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RelationsResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.RelationsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.RelationsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.RelationsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.RelationsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            relationsList: jspb.Message.toObjectList(msg.getRelationsList(), proto.Relation.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RelationsResponse}
 */
proto.RelationsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.RelationsResponse;
    return proto.RelationsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RelationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RelationsResponse}
 */
proto.RelationsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.Relation;
                reader.readMessage(value, proto.Relation.deserializeBinaryFromReader);
                msg.addRelations(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RelationsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.RelationsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RelationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RelationsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRelationsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.Relation.serializeBinaryToWriter);
    }
};
/**
 * repeated Relation relations = 1;
 * @return {!Array<!proto.Relation>}
 */
proto.RelationsResponse.prototype.getRelationsList = function () {
    return /** @type{!Array<!proto.Relation>} */ (jspb.Message.getRepeatedWrapperField(this, proto.Relation, 1));
};
/**
 * @param {!Array<!proto.Relation>} value
 * @return {!proto.RelationsResponse} returns this
*/
proto.RelationsResponse.prototype.setRelationsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.Relation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Relation}
 */
proto.RelationsResponse.prototype.addRelations = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Relation, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RelationsResponse} returns this
 */
proto.RelationsResponse.prototype.clearRelationsList = function () {
    return this.setRelationsList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Relation.prototype.toObject = function (opt_includeInstance) {
        return proto.Relation.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Relation} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Relation.toObject = function (includeInstance, msg) {
        var f, obj = {
            entity: jspb.Message.getFieldWithDefault(msg, 1, ""),
            permission: jspb.Message.getFieldWithDefault(msg, 2, ""),
            object: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Relation}
 */
proto.Relation.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Relation;
    return proto.Relation.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Relation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Relation}
 */
proto.Relation.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setEntity(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPermission(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setObject(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Relation.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Relation.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Relation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Relation.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEntity();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPermission();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getObject();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string entity = 1;
 * @return {string}
 */
proto.Relation.prototype.getEntity = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.Relation} returns this
 */
proto.Relation.prototype.setEntity = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string permission = 2;
 * @return {string}
 */
proto.Relation.prototype.getPermission = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.Relation} returns this
 */
proto.Relation.prototype.setPermission = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string object = 3;
 * @return {string}
 */
proto.Relation.prototype.getObject = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.Relation} returns this
 */
proto.Relation.prototype.setObject = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
goog.object.extend(exports, proto);
